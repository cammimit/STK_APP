import * as sinon from 'sinon';
import { ErrorRequestHandler, RequestHandler } from 'express';
export declare type ErrorCheck = (err: any) => void;
export declare class Mocks {
    req: any;
    res: any;
    next: sinon.SinonStub;
    private initialResponse;
    constructor(requestOptions?: {}, responseOptions?: {}, req?: any, res?: any, next?: sinon.SinonStub);
    test(router: RequestHandler<any, any, any, any>): TestResult;
    testError(router: ErrorRequestHandler<any, any, any, any>, err: unknown): TestResult;
    private execute;
    private createTestResult;
}
export interface TestResult extends Promise<Mocks> {
    expectJson(expectedJson: any): TestResult;
    expectJsonp(expectedJson: any): TestResult;
    expectSend(...args: any[]): TestResult;
    expectEnd(...args: any[]): TestResult;
    expectRender(...args: any[]): TestResult;
    expectRedirect(...args: any[]): TestResult;
    expectSendStatus(expectedStatus: number): TestResult;
    expectSendFile(...args: any[]): TestResult;
    expectDownload(...args: any[]): TestResult;
    expectType(expectedType: string): TestResult;
    expectStatus(expectedStatus: number): TestResult;
    expectNext(expected?: any, message?: string | RegExp | ErrorCheck): TestResult;
    expectHeader(name: string, value: string): TestResult;
}
export default class ExpressMocks {
    static mockRequest: (options?: {}) => any;
    static mockResponse: (options?: {}) => any;
    static create: (requestOptions?: {}, responseOptions?: {}) => Mocks;
}
