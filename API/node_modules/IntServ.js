//my testing app :-)
//this is the node code
//for the fstckm Server

//because the number of clients is typically
//small - we store our sessions in
//local data storage. it could be expanded
//with a REDIS type option for local, fast or
//DB for large volume, bit slower

const express = require('express');
const session = require('express-session');
const bodyParser    = require('body-parser');
const cookieParser  = require('cookie-parser');
const cookieSession = require('cookie-session');
const router = express.Router();
const app     = express();
const port    = 3000;

var mysql     = require('./node_modules/mysql');
var http      = require('http');
var url       = require('url');
var domain    = require('domain');
var qs        = require('querystring');
var messages  = require('./MESSAGES/Messages.js');
var init      = require('./FCSTKPROC/InitRAPI.js');
var closeit   = require('./SHUTDOWN/ShutdownFCSTK');
var configReads = require('./READCONFIG/readConfig');

//app.use(express.cookieParser('duygls4h%hxh^hgh'));
//app.use(express.cookieSession());
//ensure router middleware loaded after the secret
//app.use(app.router);

app.use(session({secret: 'duygls4h%hxh^hgh',saveUninitialized: true,resave: true}));
app.use(bodyParser.json());      
app.use(bodyParser.urlencoded({extended: true}));
app.use(express.static(__dirname + '/pages'));

/* this is our local copy of the sessions */
/* which includes their user level */
var locSessions = new Array();
var sesskey   =1;
var globalset= 0;
var readyForLive = 0;

var sess; // global session, NOT recommended

/* INIT */
console.log('Trying to init our counters');
	var Counters ={
	currchildren: 0,
	currbuffers: 0,
	initdone: 0,	
	dbconn : 0
	}
	Counters.initdone =1;
console.log('Trying to init our config');
    var Configs = {
	"n_maxchildren" : 10,
	"n_childtimeoutsecs" : 100,
	"n_maxbuffers" : 100,
	"n_maxbuffersize": 16000,
	"clientQueryLog" : "_Data_Logs/clientQueryLog",
	"queryErrorProfileLog" : "_Data_Logs/queryErrorProfileLog",
	"errorProfileLog" : "_Data_Logs/errorProfileLog",
	"initdone": "0"	
	};

  console.log('Trying to read our config file');
 
  configReads.rcReadConfigFile(Configs);

  console.log('Starting main sequence');

/* DB Connection TODO port to module */
var con = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "P8ll8nd0#_#_"
});

con.connect(function(err) {
  if (err) {throw err;
  RAPIShutdown(4,'Database Server Not Ready After Connect Return');}
  Counters.dbconn =1;
  console.log("Connected to our db server!");
});




//
//function clientHandle(req, res)
//{
//console.log('Request received');
//var tUrl=req.url;
//var meth=req.method;
//console.log('Test URL: ' + tUrl);
//console.log('Method:' + meth);
//console.log('.');
//
//	switch(meth)
//	{
//	case 'GET':
//		/* TODO put in some DOS defence delays */
//		if(tUrl==='/ct'){return messages.cStat(req, res);}
//		/* TODO obviously fix the permissions matrix !!!! */
//		if(tUrl==='/sd'){livehttp.close(); return RAPIShutdown(0, 'ClientForcedShutdown')}
//		/* TODO this is priveleged status */
//		if(tUrl==='/adminstat'){return messages.streamAdminStat(req, res, Counters, Configs);}
//		/* TODO set this up and chunk the file out to client */
//		if(tUrl==='/favicon.ico'){}
//		/* basic GET retrieval service  */
//		
//		return messages.retrDat(req, res, Counters, Configs);
//		
//	break;	
//	
//	case 'POST':
//		/* basic POST retrieval service  */
//		/* will need to register for the rest of the body */
//		/* in order to get the content out of it */
//		req.on('data', function (data) {
//           body += data;
//			
//            // Too much POST data, kill the connection!
//            // 1e6 === 1 * Math.pow(10, 6) === 1 * 1000000 ~~~ 1MB
//            if (body.length > 1e6)
//               request.connection.destroy();
//        });
//		//now to parse the received body
//        request.on('end', function () {
//            var post = qs.parse(body);
//            // use post['blah'], etc.
//		});
//		
//		res.writeHead(405);
//		res.end();
//	break;
//	
//	case 'PUT':
//		res.writeHead(405);
//		res.end();
//	
//	break;
//	
//	case 'DELETE':
//		res.writeHead(405);
//		res.end();
//	
//	break;
//
//	default:
//		res.writeHead(405);
//		res.end();
//	}
//
//}


/* routes first */
router.get('/',(req,res) => {
console.log('About to serve LOGIN Form from root');	
    sess = req.session;
    if(sess.ourtoken) {
        return res.redirect('/countform');
    }
	//console.log('About to serve LOGIN Form from root');
	var options = {'root':"D:/DEV/Node/FSTCK/pages/"};
    res.sendFile(__dirname + '/pages/' + 'login.html');
});

router.get('/login',(req,res) => {
	console.log('About to serve LOGIN Form from login get');
    sess = req.session;
    sess.email = req.body.email;
    res.end('done');
});

router.post('/login',(req,res) => {
	console.log('Attempt to Login User');
    sess = req.session;
    sess.email = req.body.email;
    res.end('done');
});

router.post('/auth',(req,res) => {
	console.log('Attempt to Auth the User');
	messages.Auth(req,res);
    //sess = req.session;
    //sess.email = req.body.email;
	return;
    //res.end('shot off a request to auth the user <br>done<br>');
});

router.get('/countform',(req, res) => {
	/* if not auth cannot get this page at all */
	/* the rapi will also check auth separately */
    /* there are two levels of perm which limit */
	/* which page you can get */
	//if()
	res.sendFile(__dirname + '/pages/' + 'fcc1.html');	
	
});



router.get('/shutdown',(req, res) => {
		console.log('Shutdown requested');
	    serverObj.close;
		process.exit(0);	
});

/* actually setting up the server ########### */
/* ########################################## */


app.use('/', router);



function checkReady(setUpTimer)
{
	globalset = globalset + 3;
	/* TODO  make a proper closure to not pollute */
	console.log('Trying initcheck before setting up server. Global set = ' + globalset);	
    readyForLive = init.initCheckInit(Configs,Counters);	
	console.log('readyForLive returned: ' + readyForLive);
    if(readyForLive)
	{
	console.log('readyForLive now to fire up the server: ');
	clearInterval(setUpTimer);
//we are trying to make this server global on purpose	
    serverObj = app.listen(process.env.PORT || 3000,() => {
    console.log(`App Started on PORT ${process.env.PORT || 3000}`);
	console.log('...');
});	
	}
	else
	{
		if(globalset>=100){clearInterval(setUpTimer);RAPIShutdown(4,'Initiation Failed');}
	}	
}


/* this is the server */
/* give us a decent time to setup before starting */
console.log("Setting timer for server setup");
var setUpTimer = setInterval( function () {
	checkReady(setUpTimer);
},3000);


/* this will jsut keep us running because there is always something to do */
//var longlife = setInterval(function a(){}, 100);
var longlife = setTimeout(function() {
	RAPIShutdown(0,'Timer');
},500000);




/* SHUTDOWN */
function RAPIShutdown(err, reason)
{
	console.log('Shutting Down Server:');
	console.log(' ' +reason);
	process.exit(0);
}



/* DEFUNCT SERVER MESSAGE HANDLING */

//serv.get('/',(req, res) => res.send('Express Test. Hello<br>'));

//serv.get('/ct',(req, res) =>{return messages.cStat(req, res);});

//serv.listen(port, () => console.log(`Example app listening on port ${port}!`))

//function createServer(arb)
//{	
//console.log('Now trying to set up the server');
/*intentionally trying to globalise..~\()/~  */
//	livehttp=http.createServer();
//	livehttp.on('request', function(req,res) {clientHandle(req,res);});
//	livehttp.listen(8080);	
//console.log('Ready for clients');
//}